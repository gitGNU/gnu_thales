\input texinfo @c -*- texinfo -*-
@c %**start of header
@setfilename Guile-libircclient.info
@settitle Guile-libircclient
@c %**end of header
@copying
This is a documentation of a GNU Guile bindings to libircclient,
version 1.6.

Copyright @copyright{} 2013 Dmitry Bogatov.
@end copying


@titlepage
@title Guile libircclient
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Guile libircclient

This is a documentation of a GNU Guile bindings to libircclient,
version 1.6.
@end ifnottex
@menu
* Introduction::                Description of IRC.
* Reference::
* Index::                       Complete index.
@end menu

@node Introduction, Reference, Top, Top
@chapter Introduction
Two words what is IRC and why it it so problematic to deal with.

@node Reference, Index, Introduction, Top
@chapter Reference

@menu
* Manging connection::
* Initiating commands::
* Dealing with events::
@end menu

@node Manging connection, Initiating commands, Reference, Reference
@section Manging connection

@defun create-connection @var{#:server} @var{#:nickname} . keywords-args
@findex create-connection
 Return opaque object of type @var{<irc-session>}, representing connection to irc server.
 All arguments require keyword syntax.
 @itemize
 @item @var{#:server} Mandatory. Address of server to connect.
 @item @var{#:nickname} Mandatory. Nickname to use. If already in use
        you will get error via numeric event.
 @item @var{#:port} TCP port of irc server. Defaults to 6667.
 @item @var{#:server-password} Password to connect to server. Rarely used.
 @item @var{#:username} Username, returned by whois query.
 @item @var{#:realname} Real name, returned by whois query.
 @item @var{#:ipv6} Boolean flag, whether server address belongs
        to ipv6 namespace. May be unavaliable.
 @end itemize
@end defun

@defun disconnect! @var{<irc-session>}
@findex disconnect!
This function closes the IRC connection. After that connection is
closed, libircclient automatically leaves @code{run!} loop.

@strong{Warning:} Due bug in underlying library, using this function under some
circumstances results in buffer overflow. Prefer using @code{quit!}.
@end defun

@defun run! @var{<irc-session>}
@findex run!
 Go into the loop, processing the IRC events, and calling appropriate
 callbacks. This function will not return until the server connection
 is terminated – either by server, or by calling @code{quit!}.
@end defun

@node Initiating commands, Dealing with events, Manging connection, Reference
@section Initiating commands

@defun join! @var{<irc-session>} @var{channel} @var{#:password}
@findex join!
 Joins the new IRC channel. If the channel does not exist, it will be
 automatically created by the IRC server. Note that to JOIN the
 password-protected channel, you must know the password, and specify it
 in the key argument.  If join is successful, the event_join will be
 called (with origin set to your nickname), then you are sent the
 channel’s topic (using event_topic) and the list of users who are on
 the channel (using LIBIRC_RFC_RPL_NAMREPLY), which will include the
 user joining – namely you.
@end defun

@defun quit! @var{<irc-session>} @var{#:reason}
@findex quit!
This function sends the QUIT command to the IRC
server. Usually upon receiving this command the IRC server closes the
connection.
@end defun

@defun part! @var{<irc-session>} @var{channel}
@findex part!
Leaves the IRC channel. This function is used to leave the IRC channel
you’ve already joined to. An attempt to leave the channel you aren’t
in results a LIBIRC_RFC_ERR_NOTONCHANNEL server error.
@end defun
@defun names! @var{<irc-session>} @var{channel}
List users on @var{channel}.
@end defun

@defun raw! @var{<irc-session>} @var{command}
Raw command to pass to server.
@end defun

@defun whois! @var{<irc-session>} @var{nickname}
Query about nick.
@end defun

@node Dealing with events,  , Initiating commands, Reference
@section Dealing with events


@defun hook-ref! @var{<irc-session>} @var{#:keyword}
This function return hook will be runned in case of event,
corresponding @var{#:keyword}.  Here is list of all possible
keywords. Note, that different hooks have different signatures.
@defun #:connect @var{<irc-session>}
        Hook, runned on connection to server.
@end defun

@defun #:nick @var{<irc-session>} @var{old-nick} @var{new-nick}
       Hook, runned when someone change her nick from @var{old-nick} to @var{new-nick}
@end defun

@defun #:quit @var{<irc-session>} @var{nick} @var{reason}
       Hook, runned when @var{nick} quit from server with
       @var{reason}, that can be empty string.
@end defun

@defun #:join @var{<irc-session>} @var{channel} @var{nick}
       Hook, runned when @var{nick}, probably you, joined @var{channel}
@end defun

@defun #:part @var{<irc-session>} @var{channel} @var{nick} @var{reason}
       Hook, runned when @var{nick} parts from @var{channel} with @var{reason}, that
       can be empty string.
@end defun

@defun #:channel @var{<irc-session>} @var{channel} @var{nick} @var{text}
       Hook, runned when @var{nick} says aloud @var{text}(may be empty) at @var{channel}
@end defun

@end defun @c end of hook-ref!
@node Index,  , Reference, Top
@unnumbered Index

@printindex cp

@bye
